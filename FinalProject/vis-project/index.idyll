[meta title:"Mathematical Visualizations" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"Approximate Bayesian Computation (ABC)"
  subtitle:"Mathematical Visualizations"
  author:"Davi Sales Barreira"
  authorLink:"https://github.com/davibarreira/Visualizations"
  date:`(new Date()).toDateString()`
  background:"#222222"
  color:"#ffffff"
   /]


## Introduction
This project aims to explore visualizations in mathematics. The idea
is to create a "gallery" with different "collections", each exploring
a different mathematical topic. At the moment, I'm still deciding which
topic this project will focus on. There are two candidates and I might
end up doing both, depending on how much work turns out to be necessary.

## Tools
First, I plan to use this language (idyll) to write the iteractive web-page
and publish it. This is perfect from creating the so called "explorable
exaplanations".
I also plan to use Vega-Lite to generate most of my graphs with iterations.

## Topics
### 1. Approximate Bayesian Computation (ABC)
This is an algorithm created to estimate the posterior probability density.
Originally, it was proposed as a way of explaining how posterior
probabilities could be understood in the context of frequency sampling.
The idea originated from a paper of Donald Rubin in the 1980's, which
stated that a posterior can be obtained by choosing parameters from a prior,
simulating the sampling process of the real observations and accepting
the parameters only when the simulated sample matched the real one.

#### 1.1 ABC Sampler
[aside]
[Equation]
θ \sim U(0,1), \quad
K \mid θ \sim Binomial(n=8, p=θ)
[/Equation]
[br /]
[br /]
[Equation]
p(θ \mid K=6) \propto
\pi(θ)p(k \mid θ)
[/Equation]
[br /]
[br /]
![quill](static/images/distributions.png)
[/aside]

The idea of the ABC sampler is that we can get the posterior probability
density function by samping from the prior distribution and then simulating
the statistical experimenting, accepting the sampled parameter when the
simulation result matches with the observed real world experiment.

Perhaps a better way to understand the method is with an example. Assume
that we threw a coin 8 times and observed 6 heads. Supposing that the bias
of our coins (θ)
come from a uniform prior distribution, we want to get the posterior
distribution.

This posterior distribution can be obtained in the following way. First,
we sample a coin with bias θ from the prior distribution π(θ). We then
throw the coin 8 times and check how many heads (sucesses) we got. If the
number of heads is equal to 6 (the observed value), then we accept the
θ. After doing this several times, the distribution of the θ's accepted
is equal to our posterior distribution.

[var name:"idSampler" value: 1 /]
[data name:"abcBeta" source:"ABC_Beta.csv" /]
[var name:"state" value:0 /]
[derived name:"nSucesses" value:`abcBeta.filter(c => c.x4 == idSampler)[0].x1` /]
[derived name:"nBias" value:`abcBeta.filter(c => c.x4 == idSampler)[0].x3` /]

[var name:"rejected" value:"Coin Rejected" /]
[var name:"accepted" value:"Coin Accepted" /]

Let's run a simulation.

We start with the sample  **[display var:idSampler format:"d" /]**.
Running the simulation:
* Coin has a θ = **[display var:nBias format:"f" /]**;
* Simulated number of heads = **[display var:nSucesses format:"d" /]**  ;

 * [Conditional if:`nSucesses != 6`]**[display var:rejected format:"d" /]**[/Conditional][Conditional if:`nSucesses == 6`]**[display var:accepted format:"d" /]**[/Conditional]


[button onClick:`idSampler++` style:`{padding: 10, background: '#ddd',
margin: '0 auto', display: 'block', cursor: 'pointer'}`]
Sample new coin
[/button]


[IdyllVegaLite data:abcBeta spec:`{
  "hconcat" : [
    {
      "layer":[{
      "width": 500,
      "height": 300,
      "mark":{"type":"area","line":true},
      "encoding": {
      "x": {
          "field": "x3",
          "type": "quantitative",
          "axis":{"grid":false,"title":"Coin Bias"}
      },
      "y": {
          "field": "x5",
          "type": "quantitative",
          "axis":{"grid":false},
          "scale":{"domain":[0,1.2]}
        }
      }},{
      "width": 500,
      "height": 300,
      "transform": [
        {"filter": {"field": "x4", "equal":idSampler}}
      ],
      "mark": {"type":"bar", "color":"orange"},
      "encoding": {
      "x": {
          "field": "x3",
          "type": "quantitative",
          "scale":{"domain":[0,1]},
              "axis":{"grid":false}
      },
      "y": {
          "field": "x5",
          "type": "quantitative",
          "title": "Prior Probability",
          "scale":{"domain":[0,1.2]}
        },
      "color":{"field":"x4","type":"nominal",
                "legend": {"orient": "top", "title": "Sampled Coin"},
                "scale": {
                "range": ["orange"]
                }}
              }
      }
      ]
  },
  {
      "width": 500,
      "height": 300,
      "transform": [
        {
          "filter":{"and":[{"field": "x1", "equal":6},
              {"field": "x4", "lte":idSampler}]
          }
      }],
      "mark": "bar",
      "encoding": {
      "x": {
          "scale":{"domain":[0,1]},
          "bin": {
              "binned": false,
              "step": 0.05},
          "field": "x3",
          "type": "quantitative",
          "axis":{"grid":false,"title":"Coin Bias"}
      },
      "y": {
          "aggregate": "count",
          "type": "quantitative",
          "title": "Count Samples Posterior",
          "axis":{"grid":false},
          "scale":{"domain":[0,22]}
        }
      }}
  ]
}` /]

[Float position:"center"]
Number of Coins Sampled [Range value:idSampler min:1 max:1000 step:1/]
[Display value:idSampler /]
[/Float]

To simulate more samples at once, use the handle above.

In the case above we obtain the posterior distribution only for the
case when K=6. This is extended in the
graph below. In the left we plot all the coins sampled with the respective number of
heads obtained when the throws are simulated. At the right we plot the histogram
of the bias (θ) of this coins by filtering by the number of heads obtained.

This graph is interactive, hence, you can alter the gray region which filters
the coin by number of successes. Changing the position of the filter,
one can observe the different posterior distribution estimates given by the
ABC sampler for different he observed number of heads.


[var name:"numberBins" value:15 /]
[var name:"color" value:"gray" /]

// [data name:"abcBeta" source:"ABC_Beta.csv" /]
// [var name:"state" value:0 /]
[IdyllVegaLite data:abcBeta spec:`{
  "hconcat" : [
    {

      "view":{"stroke" : null},
      "layer": [{


      "selection": {
        "brush": {"type": "interval","encodings": ["x"],"init":{"x": [5.6, 6.4]}}
      },
      "view":{"stroke" : null},
      "width": 500,
      "height": 300,
      "mark": {"type": "bar","stroke": "black",
      "strokeWidth": 0.2},
      "encoding": {
          "x": {"field": "x1", "type": "quantitative","axis": {"grid":false, "title":"K (# sucesses)"},"scale":{"domain":[-0.1,8.1]}},
          "y": {"aggregate": "count","type": "quantitative", "axis": {"grid":false, "title":"Count Samples"}},
          "size":{"value":15},
          "color": {
                "condition": {"selection": "brush", "field": "x3", "type": "quantitative","title":"Coin Bias",
                "legend": {"orient": "top", "title": "Coin Bias"}
                              },
                "value": "grey"
              }
          }
  }]},
    {
      "layer":[{
      "transform": [
        {"filter": {"selection": "brush"}}
      ],
      "width": 500,
      "height": 300,
      "mark": "bar",
      "encoding": {
      "x": {
          "bin":{"maxbins":20},
          "field": "x3",
          "type": "quantitative", "axis":{"title":"Coin Bias"}
      },
      "y": {
          "aggregate": "count",
          "type": "quantitative",
          "title": "Count Samples"
        }
      }}
      ]
  }]
}` /]
