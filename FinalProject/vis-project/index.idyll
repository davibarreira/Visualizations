[meta title:"Mathematical Visualizations" description:"Explorable Explanatio
of Approximate Bayesian Calculation algorithm" /]

[Header
  fullWidth:true
  title:"Approximate Bayesian Computation (ABC)"
  subtitle:"Mathematical Visualizations"
  author:"Davi Sales Barreira"
  authorLink:"https://github.com/davibarreira"
  date:`(new Date()).toDateString()`
  background:"#222222"
  color:"#ffffff"
   /]


## Introduction
This project aims to create an "explorable explanation" for the
Approximate Bayesian Computation (ABC) algorithm.

## 1. Approximate Bayesian Computation (ABC)
This is an algorithm created to estimate the posterior probability density.
Originally, it was proposed as a way of explaining how posterior
probabilities could be understood in the context of frequency sampling.
The idea originated from a paper of Donald Rubin in the 1980's, which
stated that a posterior can be obtained by choosing parameters from a prior,
simulating the sampling process of the real observations and accepting
the parameters only when the simulated sample matched the real one.
This method is also called likelihood-free, since it allows one to
obtain a posterior probability without the use of the likelihood function.
Such feature is very important in problems where the likelihood function
has an unknown closed form or is very expensive to calculate.

### 1.1 ABC Original Algorithm
[aside]
[Equation]
θ \sim U(0,1), \quad
K \mid θ \sim Binomial(n=8, p=θ)
[/Equation]
[br /]
[br /]
[Equation]
p(θ \mid K=6) \propto
\pi(θ)p(k \mid θ)
[/Equation]
[br /]
[br /]
![quill](static/images/distributions.png)
[/aside]

The idea of the ABC sampler is that we can get the posterior probability
density function by samping from the prior distribution and then simulating
the statistical experimenting, accepting the sampled parameter when the
simulation result matches with the observed real world experiment.

Perhaps a better way to understand the method is with an example. Assume
that we threw a coin 8 times and observed 6 heads. Supposing that the bias
of our coins (θ)
come from a uniform prior distribution, we want to get the posterior
distribution.

This posterior distribution can be obtained in the following way. First,
we sample a coin with bias θ from the prior distribution π(θ). We then
throw the coin 8 times and check how many heads (sucesses) we got. If the
number of heads is equal to 6 (the observed value), then we accept the
θ. After doing this several times, the distribution of the θ's accepted
is equal to our posterior distribution. The algorithm for the method
is shown below.

[img src:"./static/images/ABC_algo1.png" height:200 /]

[var name:"idSampler" value: 1 /]
[data name:"abcBeta" source:"ABC_Beta.csv" /]
[var name:"state" value:0 /]
[derived name:"nSucesses" value:`abcBeta.filter(c => c.x4 == idSampler)[0].x1` /]
[derived name:"nBias" value:`abcBeta.filter(c => c.x4 == idSampler)[0].x3` /]

[var name:"rejected" value:"Coin Rejected" /]
[var name:"accepted" value:"Coin Accepted" /]

### Let's run a simulation!

We start with the sample  **[display var:idSampler format:"d" /]**.
Running the simulation:
* Coin has a θ = **[display var:nBias format:"f" /]**;
* Simulated number of heads = **[display var:nSucesses format:"d" /]**  ;

 * [Conditional if:`nSucesses != 6`]**[display var:rejected format:"d" /]**[/Conditional][Conditional if:`nSucesses == 6`]**[display var:accepted format:"d" /]**[/Conditional]


[button onClick:`idSampler++` style:`{padding: 10, background: '#ddd',
margin: '0 auto', display: 'block', cursor: 'pointer'}`]
Sample new coin
[/button]


[IdyllVegaLite data:abcBeta spec:`{
  "hconcat" : [
  {
    "layer":[{
    "width": 500,
    "height": 300,
    "mark":{"type":"area","line":true},
    "encoding": {
    "x": {
        "field": "x3",
        "type": "quantitative",
        "axis":{"grid":false,"title":"Coin Bias (θ)"}
    },
    "y": {
        "field": "x5",
        "type": "quantitative",
        "axis":{"grid":false},
        "scale":{"domain":[0,1.2]}
      }
    }},{
    "width": 500,
    "height": 300,
    "transform": [
      {"filter": {"field": "x4", "equal":idSampler}}
    ],
    "mark": {"type":"bar", "color":"orange"},
    "encoding": {
    "x": {
        "field": "x3",
        "type": "quantitative",
        "scale":{"domain":[0,1]},
            "axis":{"grid":false}
    },
    "y": {
        "field": "x5",
        "type": "quantitative",
        "title": "Prior Probability",
        "scale":{"domain":[0,1.2]}
      },
    "color":{"field":"x4","type":"nominal",
              "legend": {"orient": "top", "title": "Sampled Coin"},
              "scale": {
              "range": ["orange"]
              }}
            }
    }
    ]
},
{
    "layer":[{
    "width": 500,
    "height": 300,
    "transform": [
      {
        "filter":{"and":[{"field": "x1", "equal":6},
            {"field": "x4", "lte":idSampler}]
        }
    }],
    "mark": "bar",
    "encoding": {
    "x": {
        "scale":{"domain":[0,1]},
        "bin": {
            "binned": false,
            "step": 0.1},
        "field": "x3",
        "type": "quantitative",
        "axis":{"grid":false,"title":"Coin Bias (θ)"}
    },
    "y": {
        "aggregate": "count",
        "type": "quantitative",
        "axis":{"grid":false, "title":"Count Samples Posterior", "titleColor":"steelblue"},
        "scale":{"domain":[0,36]}
      }
    }},
    {
    "width": 500,
    "height": 300,
          "mark": {"type": "line", "color": "black"},
          "encoding": {
            "x": {"type": "quantitative", "field": "x6"},
            "y": {
              "type": "quantitative",
              "field": "x7", "axis": {"title":"Real posterior distribution", "titleColor":"black"}
            },"size":{"value":3}
          }
        }
    ],"resolve": {"scale": {"y": "independent", "x": "shared"}}
}
  ]
}` /]

[Float position:"center"]
Number of Coins Sampled [Range value:idSampler min:1 max:1000 step:1/]
[Display value:idSampler /]
[/Float]

To simulate more samples at once, use the handle above.

In the case above we obtain the posterior distribution only for the
case when K=6. This is extended in the
graph below. In the left we plot all the coins sampled with the respective number of
heads obtained when the throws are simulated. At the right we plot the histogram
of the bias (θ) of this coins by filtering by the number of heads obtained.

This graph is interactive, hence, you can alter the gray region which filters
the coin by number of successes. Changing the position of the filter,
one can observe the different posterior distribution estimates given by the
ABC sampler for different observed number of heads.


[var name:"numberBins" value:15 /]
[var name:"color" value:"gray" /]

// [data name:"abcBeta" source:"ABC_Beta.csv" /]
// [var name:"state" value:0 /]
[IdyllVegaLite data:abcBeta spec:`{
  "hconcat" : [
    {

      "view":{"stroke" : null},
      "layer": [{


      "selection": {
        "brush": {"type": "interval","encodings": ["x"],"init":{"x": [5.6, 6.4]}}
      },
      "view":{"stroke" : null},
      "width": 500,
      "height": 300,
      "mark": {"type": "bar","stroke": "black",
      "strokeWidth": 0.2},
      "encoding": {
          "x": {"field": "x1", "type": "quantitative","axis": {"grid":false, "title":"K (# sucesses)"},"scale":{"domain":[-0.1,8.1]}},
          "y": {"aggregate": "count","type": "quantitative", "axis": {"grid":false, "title":"Count Samples"}},
          "size":{"value":15},
          "color": {
                "condition": {"selection": "brush", "field": "x3", "type": "quantitative","title":"Coin Bias",
                "legend": {"orient": "top", "title": "Coin Bias"}
                              },
                "value": "grey"
              }
          }
  }]},
    {
      "layer":[{
      "transform": [
        {"filter": {"selection": "brush"}}
      ],
      "width": 500,
      "height": 300,
      "mark": "bar",
      "encoding": {
      "x": {
          "bin":{"maxbins":16},
          "field": "x3",
          "type": "quantitative", "axis":{"title":"Coin Bias"}
      },
      "y": {
          "aggregate": "count",
          "type": "quantitative",
          "title": "Count Samples"
        }
      }}
      ]
  }]
}` /]

### 1.2 ABC for Continuos Variables
Pritchard et al. (1999) extended the original algorithm to the case of
continuos sample. The problem with continuos variables is that
a precise match between the simulated and the observed value becomes impossible.
The intuitive extension of the model is use a precision distance (ϵ), so
we accept θ when the simulated and the observed value are closer than a value
ϵ. Another extension is to use a sufficient static instead of each individual
observed value.
The algorithm for ABC dealing with continuos variables
is given below.
[img src:"./static/images/ABC_algo2.png" height:300 /]

[br /]

[aside]
[Equation]
p(θ \mid X) \propto
\pi(θ) p(X \mid θ), \quad \quad
θ \mid X \sim N(μ_1, τ^2_1)
[/Equation]
[br /]
[br /]
[Equation]
μ_1 = \frac{τ^{-2}μ + σ^{-2}x}{τ^{-2} + σ^{-2}}, \quad \quad
τ_1^{-2} = τ^{-2} + σ^{-2}
[/Equation]
[br /]
[br /]
![quill](static/images/normaldistribution.png)
[/aside]
Again, let's do an example to make the method clearer.
Consider a model where [Equation]
θ \sim N(μ,τ^2)
[/Equation] and [Equation]
X \mid θ \sim N(θ,σ^2)
[/Equation], with [Equation]
σ^2
[/Equation]
 known. Therefore, our posterior distribution is also gaussian.

In our toy model, we observed 5 values with the mean equal to 1.3.
The mean is a sufficient static for this model, hence, our algorithm
works by sampling a θ from the prior,
then we use this θ to sample 5 values from [Equation]N(θ, σ^2)[/Equation]
and take their average.
If the distance between the synthetic average and the observed average
is less or equal than ϵ, we accept the θ.

[var name:"eABC" value:3 /]
In the graph below we plot the synthetic average for each simulation.
The gray area represents the acceptance region and the
green line is the observed average. You can vary
ϵ and see how decreasing it leads to a better approximation of the posterior.
You can
move the range slider to change the starting value of the **threshold** [dynamic min:0.1 max:10 step:0.1 value:eABC /].

ϵ : 0.1 [Range value:eABC min:0.1 max:10 step:0.1/] 10

[data name:"abcNormal" source:"ABC_Normal.csv" /]
[IdyllVegaLite data:abcNormal spec:`{
    "hconcat" : [
  {

    "view":{"stroke" : null},
    "layer": [{


    "selection": {
      "brush": {"type": "interval","encodings": ["y"],"init":{"y": [1.29-eABC,eABC+1.29]}}
    },
    "view":{"stroke" : null},
    "width": 500,
    "height": 300,
    "mark": {"type": "circle"},
    "encoding": {
        "x": {"field": "Id", "type": "quantitative","axis": {"grid":false, "title":"# Iteration"}},
        "y": {"field": "Zm", "type":"quantitative","axis": {"grid":false, "title":"Sample Averege"}},
        "size":{"value":10},
        "color": {
              "condition": {"selection": "brush", "type": "quantitative","title":"Theta",
              "legend": {"orient": "top", "title": "Theta"}
                            },
              "value": "lightGrey"
            }
        }
},
{
    "view":{"stroke" : null},
    "width": 500,
    "height": 300,
    "mark": {"type": "line"},
    "encoding": {
        "x": {"field": "Id", "type": "quantitative","axis": {"grid":false}},
        "y": {"field": "Mu", "type":"quantitative"},
        "size":{"value":3},
        "color": {
              "value": "green"
            }
        }
}
]},
  {
    "layer":[
    {
    "transform": [
      {"filter": {"selection": "brush"}}
    ],
    "width": 500,
    "height": 300,
      "mark": {"type": "bar", "color": "steelblue","opacity":1.0},
      "encoding": {
        "x": {
            "bin":{"maxbins":20},
            "field": "Theta",
            "type": "quantitative"
        },
        "y": {
          "type": "quantitative",
          "aggregate": "count",
          "field": "Theta","axis":{"title":"# ABC Accepted Samples","titleColor":"steelblue"}
        }
      }
        },
        {
    "width": 500,
    "height": 300,
          "mark": {"type": "line", "color": "black"},
          "encoding": {
            "x": {"type": "quantitative", "field": "Grid","title":"θ"},
            "y": {
              "type": "quantitative",
              "field": "Real", "axis": {"title":"Real posterior distribution", "titleColor":"black"}
            },"size":{"value":3}
          }
        }
      ],
      "resolve": {"scale": {"y": "independent", "x": "shared"}}
}]
}` /]

### 1.3 ABC Post-Processing
As models grow in complexity, the threshold (ϵ) starts to become a problem,
since we need lower and lower values to get a better approximation, this
increases the number of simulations that we need to performed. A solution to
this problem using *linear regression* was proposed by Beaumont et al. (2002).
The method is a way to improve the results of the simulations
without the need to use restrictively low
threshold values.

[aside]
[Equation]
\text{Observed values} = \bm y \quad \quad
\text{Simulated values from ABC} = \bm z
[/Equation]
[br /]
[br /]
[Equation]
\text{Error} = (\eta(\bm y) - \eta(\bm z)), \quad \quad
\text{Regression coefficients} = \hat\beta
[/Equation]
[br /]
[br /]
[Equation]
\bm \theta^{Proj} = \bm \theta - (\eta(\bm y) - \eta(\bm z))^T\hat\beta
[/Equation]
[/aside]

The idea is to "estimate" the value of θ by projecting the sampled values
in the axis where the error (observed vs. simulated) is equal to zero. Thus,
allowing us to use sampled value of θ even when the error is quite significant.
The original model by Beaumont et al. (2002) uses a weighted regression and
considers only the values up to an error where a linear regression seems
appropriate. In our toy model, we actually use a non-weighted regression and
all the simulated samples (which is ok since we are in a fairly simple model).

In the graph below, the pink line is the linear regression and the
green points are the projection of each blue point in the y-axis.
The histogram in the right uses these projected points to construct
the approximation of the posterior. You can pass your mouse over the
scatter plot to see the corresponding projection of each point, and
double click to deselect all points.

[IdyllVegaLite data:abcNormal spec:`{
    "hconcat" : [
  {

    "view":{"stroke" : null},
    "layer": [{
    "selection": {
      "pts":{"type": "single", "nearest": true,"on":"mouseover"}
    },
    "view":{"stroke" : null},
    "width": 500,
    "height": 300,
    "mark": {"type": "circle"},
    "encoding": {
        "x": {"field": "Error", "type": "quantitative","axis": {"grid":false, "title":"Error"}},
        "y": {"field": "Theta", "type":"quantitative","axis": {"grid":false, "title":"θ"}},
        "size":{"condition":{"selection":"pts", "value":30},
                "value":5},
        "color": {
              "condition": {"selection": "pts"},
              "value": "lightGrey"
            }
        }
},
{
    "view":{"stroke" : null},
    "width": 500,
    "height": 300,
    "mark": {"type": "line"},
    "encoding": {
        "x": {"field": "Error", "type": "quantitative","axis": {"grid":false}},
        "y": {"field": "Regression", "type":"quantitative"},
        "size":{"value":3},
        "color": {
              "value": "salmon"
            }
        }
},
{
    "transform": [
      {"filter": {"selection": "pts"}}
    ],
    "view":{"stroke" : null},
    "width": 500,
    "height": 300,
    "mark": {"type": "circle"},
    "encoding": {
        "x": {"field": "zeros", "type": "quantitative","axis": {"grid":false}},
        "y": {"field": "adjusted", "type":"quantitative"},
        "size":{"condition":{"selection":"pts", "value":30}
                ,"value":5},
        "color": {
              "value":"green"
            }
        }

}
]},
  {
    "layer":[
    {
    "width": 500,
    "height": 300,
      "mark": {"type": "bar", "color": "green","opacity":1.0},
      "encoding": {
        "x": {
            "bin":{"maxbins":20},
            "field": "adjusted",
            "type": "quantitative","title":"θ",
            "scale":{"domain":[-3,7]}
        },
        "y": {
          "type": "quantitative",
          "aggregate": "count",
          "field": "Theta","axis":{"title":"# ABC Projection Samples","titleColor":"green"}
        }
      }
        },
        {
    "width": 500,
    "height": 300,
          "mark": {"type": "line", "color": "black"},
          "encoding": {
            "x": {"type": "quantitative", "field": "Grid"},
            "y": {
              "type": "quantitative",
              "field": "Real", "axis": {"title":"Real posterior distribution", "titleColor":"black"}
            },"size":{"value":3}
          }
        }
      ],
      "resolve": {"scale": {"y": "independent", "x": "shared"}}
}]
}` /]

## Conclusion
The ABC algorithm is not only an insightful way of understanding how to
generate posterior distributions, it is also a useful method when
one does not want to compute the likelihood to obtain the posterior distribution.
The algorithm worked very well for both of our examples,
but as models get complex, obtaining good approximations starts to become a
challange, specially due to the lack of low-dimensional
sufficient statistics and the need
to use decreasingly low thresholds. We presented one of the methods
used to improve the results of the ABC algorithm, the local linear
regression method. This method
worked quite well to avoid the need of using a very low threshold to
get a good approximation for the posterior.

ABC methods are still in active research. [Here](https://github.com/davibarreira/Computational_Statistics/blob/master/PaperReplication_ABC/ABC_Presentation.pdf)
can be found a presentation containing a more thorough review of the topic.

This article was created using [Idyll](http://idyll-lang.org/),
with visualizations powered by [Vega-Lite](https://vega.github.io/vega-lite/).
The source code is available on [GitHub](https://github.com/davibarreira/Visualizations/tree/master/FinalProject).


## References

Beaumont, M., Zhang, W., and Balding, D. (2002). Approximate
bayesian computation in population genetics. Genetics,
162(4):2025–2035. ID number: ISI:000180502300043.

Pritchard, J. K., Seielstad, M. T., Perez-Lezaun, A., and Feldman, M. W.
(1999). Population growth of human Y chromosomes: a study of Y
chromosome microsatellites. Molecular Biology and Evolution,
16(12):1791–1798.

Rubin, D. B. (1984). Bayesianly justifiable and relevant frequency
calculations for the applied statistician. Ann. Statist.,
12(4):1151–1172.
